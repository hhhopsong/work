# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hlu')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hlu')
    _hlu = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hlu', [dirname(__file__)])
        except ImportError:
            import _hlu
            return _hlu
        try:
            _mod = imp.load_module('_hlu', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hlu = swig_import_helper()
    del swig_import_helper
else:
    import _hlu
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_intp():
    return _hlu.new_intp()
new_intp = _hlu.new_intp

def copy_intp(value):
    return _hlu.copy_intp(value)
copy_intp = _hlu.copy_intp

def delete_intp(obj):
    return _hlu.delete_intp(obj)
delete_intp = _hlu.delete_intp

def intp_assign(obj, value):
    return _hlu.intp_assign(obj, value)
intp_assign = _hlu.intp_assign

def intp_value(obj):
    return _hlu.intp_value(obj)
intp_value = _hlu.intp_value

def new_floatArray(nelements):
    return _hlu.new_floatArray(nelements)
new_floatArray = _hlu.new_floatArray

def delete_floatArray(ary):
    return _hlu.delete_floatArray(ary)
delete_floatArray = _hlu.delete_floatArray

def floatArray_getitem(ary, index):
    return _hlu.floatArray_getitem(ary, index)
floatArray_getitem = _hlu.floatArray_getitem

def floatArray_setitem(ary, index, value):
    return _hlu.floatArray_setitem(ary, index, value)
floatArray_setitem = _hlu.floatArray_setitem
NhlSETRL = _hlu.NhlSETRL
NhlGETRL = _hlu.NhlGETRL
NhlFATAL = _hlu.NhlFATAL
NhlWARNING = _hlu.NhlWARNING
NhlINFO = _hlu.NhlINFO
NhlNOERROR = _hlu.NhlNOERROR
NhlNOLINE = _hlu.NhlNOLINE
NhlLINEONLY = _hlu.NhlLINEONLY
NhlLABELONLY = _hlu.NhlLABELONLY
NhlLINEANDLABEL = _hlu.NhlLINEANDLABEL
NhlPOLYLINE = _hlu.NhlPOLYLINE
NhlPOLYMARKER = _hlu.NhlPOLYMARKER
NhlPOLYGON = _hlu.NhlPOLYGON

def c_cssgrid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _hlu.c_cssgrid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
c_cssgrid = _hlu.c_cssgrid

def _NGGetNCARGEnv(arg1):
    return _hlu._NGGetNCARGEnv(arg1)
_NGGetNCARGEnv = _hlu._NGGetNCARGEnv

def NhlInitialize():
    return _hlu.NhlInitialize()
NhlInitialize = _hlu.NhlInitialize

def NhlClose():
    return _hlu.NhlClose()
NhlClose = _hlu.NhlClose

def NhlRLClear(arg1):
    return _hlu.NhlRLClear(arg1)
NhlRLClear = _hlu.NhlRLClear

def NhlSetValues(arg1, res_id):
    return _hlu.NhlSetValues(arg1, res_id)
NhlSetValues = _hlu.NhlSetValues

def NhlRLSetString(arg1, arg2, arg3):
    return _hlu.NhlRLSetString(arg1, arg2, arg3)
NhlRLSetString = _hlu.NhlRLSetString

def NhlRLSetFloat(arg1, arg2, arg3):
    return _hlu.NhlRLSetFloat(arg1, arg2, arg3)
NhlRLSetFloat = _hlu.NhlRLSetFloat

def NhlRLSetDouble(arg1, arg2, arg3):
    return _hlu.NhlRLSetDouble(arg1, arg2, arg3)
NhlRLSetDouble = _hlu.NhlRLSetDouble

def NhlRLSetInteger(arg1, arg2, arg3):
    return _hlu.NhlRLSetInteger(arg1, arg2, arg3)
NhlRLSetInteger = _hlu.NhlRLSetInteger

def NhlNDCPolyline(arg1, arg2, arg3, arg4, arg5):
    return _hlu.NhlNDCPolyline(arg1, arg2, arg3, arg4, arg5)
NhlNDCPolyline = _hlu.NhlNDCPolyline

def NhlNDCPolymarker(arg1, arg2, arg3, arg4, arg5):
    return _hlu.NhlNDCPolymarker(arg1, arg2, arg3, arg4, arg5)
NhlNDCPolymarker = _hlu.NhlNDCPolymarker

def NhlNDCPolygon(arg1, arg2, arg3, arg4, arg5):
    return _hlu.NhlNDCPolygon(arg1, arg2, arg3, arg4, arg5)
NhlNDCPolygon = _hlu.NhlNDCPolygon

def NhlDataPolyline(arg1, arg2, arg3, arg4, arg5):
    return _hlu.NhlDataPolyline(arg1, arg2, arg3, arg4, arg5)
NhlDataPolyline = _hlu.NhlDataPolyline

def NhlDataPolymarker(arg1, arg2, arg3, arg4, arg5):
    return _hlu.NhlDataPolymarker(arg1, arg2, arg3, arg4, arg5)
NhlDataPolymarker = _hlu.NhlDataPolymarker

def NhlDataPolygon(arg1, arg2, arg3, arg4, arg5):
    return _hlu.NhlDataPolygon(arg1, arg2, arg3, arg4, arg5)
NhlDataPolygon = _hlu.NhlDataPolygon

def NhlDraw(arg1):
    return _hlu.NhlDraw(arg1)
NhlDraw = _hlu.NhlDraw

def NhlFreeColor(arg1, arg2):
    return _hlu.NhlFreeColor(arg1, arg2)
NhlFreeColor = _hlu.NhlFreeColor

def NhlGetGksCi(arg1, arg2):
    return _hlu.NhlGetGksCi(arg1, arg2)
NhlGetGksCi = _hlu.NhlGetGksCi

def NhlGetWorkspaceObjectId():
    return _hlu.NhlGetWorkspaceObjectId()
NhlGetWorkspaceObjectId = _hlu.NhlGetWorkspaceObjectId

def NhlIsAllocatedColor(arg1, arg2):
    return _hlu.NhlIsAllocatedColor(arg1, arg2)
NhlIsAllocatedColor = _hlu.NhlIsAllocatedColor

def NhlIsApp(arg1):
    return _hlu.NhlIsApp(arg1)
NhlIsApp = _hlu.NhlIsApp

def NhlIsDataComm(arg1):
    return _hlu.NhlIsDataComm(arg1)
NhlIsDataComm = _hlu.NhlIsDataComm

def NhlIsDataItem(arg1):
    return _hlu.NhlIsDataItem(arg1)
NhlIsDataItem = _hlu.NhlIsDataItem

def NhlIsDataSpec(arg1):
    return _hlu.NhlIsDataSpec(arg1)
NhlIsDataSpec = _hlu.NhlIsDataSpec

def NhlRLIsSet(arg1, arg2):
    return _hlu.NhlRLIsSet(arg1, arg2)
NhlRLIsSet = _hlu.NhlRLIsSet

def NhlRLUnSet(arg1, arg2):
    return _hlu.NhlRLUnSet(arg1, arg2)
NhlRLUnSet = _hlu.NhlRLUnSet

def NhlIsTransform(arg1):
    return _hlu.NhlIsTransform(arg1)
NhlIsTransform = _hlu.NhlIsTransform

def NhlIsView(arg1):
    return _hlu.NhlIsView(arg1)
NhlIsView = _hlu.NhlIsView

def NhlIsWorkstation(arg1):
    return _hlu.NhlIsWorkstation(arg1)
NhlIsWorkstation = _hlu.NhlIsWorkstation

def NhlName(arg1):
    return _hlu.NhlName(arg1)
NhlName = _hlu.NhlName

def NhlNewColor(arg1, arg2, arg3, arg4):
    return _hlu.NhlNewColor(arg1, arg2, arg3, arg4)
NhlNewColor = _hlu.NhlNewColor

def NhlNewDashPattern(arg1, arg2):
    return _hlu.NhlNewDashPattern(arg1, arg2)
NhlNewDashPattern = _hlu.NhlNewDashPattern

def NhlNewMarker(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _hlu.NhlNewMarker(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
NhlNewMarker = _hlu.NhlNewMarker

def NhlSetColor(arg1, arg2, arg3, arg4, arg5):
    return _hlu.NhlSetColor(arg1, arg2, arg3, arg4, arg5)
NhlSetColor = _hlu.NhlSetColor

def NhlUpdateData(arg1):
    return _hlu.NhlUpdateData(arg1)
NhlUpdateData = _hlu.NhlUpdateData

def NhlUpdateWorkstation(arg1):
    return _hlu.NhlUpdateWorkstation(arg1)
NhlUpdateWorkstation = _hlu.NhlUpdateWorkstation

def NhlOpen():
    return _hlu.NhlOpen()
NhlOpen = _hlu.NhlOpen

def NhlCreate(arg2, arg3, arg4, arg5):
    return _hlu.NhlCreate(arg2, arg3, arg4, arg5)
NhlCreate = _hlu.NhlCreate

def NhlRLCreate(arg1):
    return _hlu.NhlRLCreate(arg1)
NhlRLCreate = _hlu.NhlRLCreate

def NhlFrame(arg1):
    return _hlu.NhlFrame(arg1)
NhlFrame = _hlu.NhlFrame

def NhlDestroy(arg1):
    return _hlu.NhlDestroy(arg1)
NhlDestroy = _hlu.NhlDestroy

def NhlRLSetMDIntegerArray(arg1, arg2, sequence_as_int, arg4, sequence_as_ngsizet):
    return _hlu.NhlRLSetMDIntegerArray(arg1, arg2, sequence_as_int, arg4, sequence_as_ngsizet)
NhlRLSetMDIntegerArray = _hlu.NhlRLSetMDIntegerArray

def NhlRLSetMDDoubleArray(arg1, arg2, sequence_as_double, arg4, sequence_as_ngsizet):
    return _hlu.NhlRLSetMDDoubleArray(arg1, arg2, sequence_as_double, arg4, sequence_as_ngsizet)
NhlRLSetMDDoubleArray = _hlu.NhlRLSetMDDoubleArray

def NhlRLSetMDFloatArray(arg1, arg2, sequence_as_float, arg4, sequence_as_ngsizet):
    return _hlu.NhlRLSetMDFloatArray(arg1, arg2, sequence_as_float, arg4, sequence_as_ngsizet)
NhlRLSetMDFloatArray = _hlu.NhlRLSetMDFloatArray

def NhlRLSetFloatArray(arg1, arg2, sequence_as_float, arg4):
    return _hlu.NhlRLSetFloatArray(arg1, arg2, sequence_as_float, arg4)
NhlRLSetFloatArray = _hlu.NhlRLSetFloatArray

def NhlRLSetIntegerArray(arg1, arg2, sequence_as_int, arg4):
    return _hlu.NhlRLSetIntegerArray(arg1, arg2, sequence_as_int, arg4)
NhlRLSetIntegerArray = _hlu.NhlRLSetIntegerArray

def NhlRLSetStringArray(arg1, arg2, arg3, arg4):
    return _hlu.NhlRLSetStringArray(arg1, arg2, arg3, arg4)
NhlRLSetStringArray = _hlu.NhlRLSetStringArray

def NhlGetValues(arg1, res_id):
    return _hlu.NhlGetValues(arg1, res_id)
NhlGetValues = _hlu.NhlGetValues

def NhlGetFloat(oid, name):
    return _hlu.NhlGetFloat(oid, name)
NhlGetFloat = _hlu.NhlGetFloat

def NhlGetFloatArray(oid, name):
    return _hlu.NhlGetFloatArray(oid, name)
NhlGetFloatArray = _hlu.NhlGetFloatArray

def NhlGetInteger(oid, name):
    return _hlu.NhlGetInteger(oid, name)
NhlGetInteger = _hlu.NhlGetInteger

def NhlGetIntegerArray(oid, name):
    return _hlu.NhlGetIntegerArray(oid, name)
NhlGetIntegerArray = _hlu.NhlGetIntegerArray

def NhlGetDouble(oid, name):
    return _hlu.NhlGetDouble(oid, name)
NhlGetDouble = _hlu.NhlGetDouble

def NhlGetDoubleArray(oid, name):
    return _hlu.NhlGetDoubleArray(oid, name)
NhlGetDoubleArray = _hlu.NhlGetDoubleArray

def NhlAddOverlay(arg1, arg2, arg3):
    return _hlu.NhlAddOverlay(arg1, arg2, arg3)
NhlAddOverlay = _hlu.NhlAddOverlay

def NhlClearWorkstation(arg1):
    return _hlu.NhlClearWorkstation(arg1)
NhlClearWorkstation = _hlu.NhlClearWorkstation

def NhlRemoveAnnotation(arg1, arg2):
    return _hlu.NhlRemoveAnnotation(arg1, arg2)
NhlRemoveAnnotation = _hlu.NhlRemoveAnnotation

def NhlAddAnnotation(arg1, arg2):
    return _hlu.NhlAddAnnotation(arg1, arg2)
NhlAddAnnotation = _hlu.NhlAddAnnotation

def NhlAppGetDefaultParentId():
    return _hlu.NhlAppGetDefaultParentId()
NhlAppGetDefaultParentId = _hlu.NhlAppGetDefaultParentId

def NhlGetParentWorkstation(arg1):
    return _hlu.NhlGetParentWorkstation(arg1)
NhlGetParentWorkstation = _hlu.NhlGetParentWorkstation

def NhlClassName(arg1):
    return _hlu.NhlClassName(arg1)
NhlClassName = _hlu.NhlClassName

def NhlGetString(arg1, arg2):
    return _hlu.NhlGetString(arg1, arg2)
NhlGetString = _hlu.NhlGetString

def NhlAddData(arg1, arg2, arg3):
    return _hlu.NhlAddData(arg1, arg2, arg3)
NhlAddData = _hlu.NhlAddData

def NhlRemoveData(arg1, arg2, arg3):
    return _hlu.NhlRemoveData(arg1, arg2, arg3)
NhlRemoveData = _hlu.NhlRemoveData

def NhlRemoveOverlay(arg1, arg2, arg3):
    return _hlu.NhlRemoveOverlay(arg1, arg2, arg3)
NhlRemoveOverlay = _hlu.NhlRemoveOverlay

def NhlGetStringArray(oid, name):
    return _hlu.NhlGetStringArray(oid, name)
NhlGetStringArray = _hlu.NhlGetStringArray

def NhlRLDestroy(arg1):
    return _hlu.NhlRLDestroy(arg1)
NhlRLDestroy = _hlu.NhlRLDestroy

def NhlGetNamedColorIndex(arg1, arg2):
    return _hlu.NhlGetNamedColorIndex(arg1, arg2)
NhlGetNamedColorIndex = _hlu.NhlGetNamedColorIndex

def NhlChangeWorkstation(arg1, arg2):
    return _hlu.NhlChangeWorkstation(arg1, arg2)
NhlChangeWorkstation = _hlu.NhlChangeWorkstation

def NhlPNDCToData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _hlu.NhlPNDCToData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
NhlPNDCToData = _hlu.NhlPNDCToData

def NhlPDataToNDC(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _hlu.NhlPDataToNDC(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
NhlPDataToNDC = _hlu.NhlPDataToNDC

def NhlGetMDFloatArray(arg1, arg2):
    return _hlu.NhlGetMDFloatArray(arg1, arg2)
NhlGetMDFloatArray = _hlu.NhlGetMDFloatArray

def NhlGetMDDoubleArray(arg1, arg2):
    return _hlu.NhlGetMDDoubleArray(arg1, arg2)
NhlGetMDDoubleArray = _hlu.NhlGetMDDoubleArray

def NhlGetMDIntegerArray(arg1, arg2):
    return _hlu.NhlGetMDIntegerArray(arg1, arg2)
NhlGetMDIntegerArray = _hlu.NhlGetMDIntegerArray

def NhlPAppClass():
    return _hlu.NhlPAppClass()
NhlPAppClass = _hlu.NhlPAppClass

def NhlPNcgmWorkstationClass():
    return _hlu.NhlPNcgmWorkstationClass()
NhlPNcgmWorkstationClass = _hlu.NhlPNcgmWorkstationClass

def NhlPPSWorkstationClass():
    return _hlu.NhlPPSWorkstationClass()
NhlPPSWorkstationClass = _hlu.NhlPPSWorkstationClass

def NhlPPDFWorkstationClass():
    return _hlu.NhlPPDFWorkstationClass()
NhlPPDFWorkstationClass = _hlu.NhlPPDFWorkstationClass

def NhlPCairoDocumentWorkstationClass():
    return _hlu.NhlPCairoDocumentWorkstationClass()
NhlPCairoDocumentWorkstationClass = _hlu.NhlPCairoDocumentWorkstationClass

def NhlPCairoImageWorkstationClass():
    return _hlu.NhlPCairoImageWorkstationClass()
NhlPCairoImageWorkstationClass = _hlu.NhlPCairoImageWorkstationClass

def NhlPCairoWindowWorkstationClass():
    return _hlu.NhlPCairoWindowWorkstationClass()
NhlPCairoWindowWorkstationClass = _hlu.NhlPCairoWindowWorkstationClass

def NhlPLogLinPlotClass():
    return _hlu.NhlPLogLinPlotClass()
NhlPLogLinPlotClass = _hlu.NhlPLogLinPlotClass

def NhlPGraphicStyleClass():
    return _hlu.NhlPGraphicStyleClass()
NhlPGraphicStyleClass = _hlu.NhlPGraphicStyleClass

def NhlPScalarFieldClass():
    return _hlu.NhlPScalarFieldClass()
NhlPScalarFieldClass = _hlu.NhlPScalarFieldClass

def NhlPContourPlotClass():
    return _hlu.NhlPContourPlotClass()
NhlPContourPlotClass = _hlu.NhlPContourPlotClass

def NhlPtextItemClass():
    return _hlu.NhlPtextItemClass()
NhlPtextItemClass = _hlu.NhlPtextItemClass

def NhlPscalarFieldClass():
    return _hlu.NhlPscalarFieldClass()
NhlPscalarFieldClass = _hlu.NhlPscalarFieldClass

def NhlPmapPlotClass():
    return _hlu.NhlPmapPlotClass()
NhlPmapPlotClass = _hlu.NhlPmapPlotClass

def NhlPcoordArraysClass():
    return _hlu.NhlPcoordArraysClass()
NhlPcoordArraysClass = _hlu.NhlPcoordArraysClass

def NhlPxyPlotClass():
    return _hlu.NhlPxyPlotClass()
NhlPxyPlotClass = _hlu.NhlPxyPlotClass

def NhlPtickMarkClass():
    return _hlu.NhlPtickMarkClass()
NhlPtickMarkClass = _hlu.NhlPtickMarkClass

def NhlPtitleClass():
    return _hlu.NhlPtitleClass()
NhlPtitleClass = _hlu.NhlPtitleClass

def NhlPlabelBarClass():
    return _hlu.NhlPlabelBarClass()
NhlPlabelBarClass = _hlu.NhlPlabelBarClass

def NhlPlegendClass():
    return _hlu.NhlPlegendClass()
NhlPlegendClass = _hlu.NhlPlegendClass

def NhlPvectorFieldClass():
    return _hlu.NhlPvectorFieldClass()
NhlPvectorFieldClass = _hlu.NhlPvectorFieldClass

def NhlPvectorPlotClass():
    return _hlu.NhlPvectorPlotClass()
NhlPvectorPlotClass = _hlu.NhlPvectorPlotClass

def NhlPstreamlinePlotClass():
    return _hlu.NhlPstreamlinePlotClass()
NhlPstreamlinePlotClass = _hlu.NhlPstreamlinePlotClass

def NGGetNCARGEnv(arg1):
    return _hlu.NGGetNCARGEnv(arg1)
NGGetNCARGEnv = _hlu.NGGetNCARGEnv

def set_PCMP04(arg1, arg2):
    return _hlu.set_PCMP04(arg1, arg2)
set_PCMP04 = _hlu.set_PCMP04

def gendat(argi, arg2, arg3, arg4, arg5, arg6, arg7):
    return _hlu.gendat(argi, arg2, arg3, arg4, arg5, arg6, arg7)
gendat = _hlu.gendat

def gactivate_ws(arg1):
    return _hlu.gactivate_ws(arg1)
gactivate_ws = _hlu.gactivate_ws

def gdeactivate_ws(arg1):
    return _hlu.gdeactivate_ws(arg1)
gdeactivate_ws = _hlu.gdeactivate_ws

def bndary():
    return _hlu.bndary()
bndary = _hlu.bndary

def c_plotif(arg1, arg2, arg3):
    return _hlu.c_plotif(arg1, arg2, arg3)
c_plotif = _hlu.c_plotif

def c_cpseti(arg1, arg2):
    return _hlu.c_cpseti(arg1, arg2)
c_cpseti = _hlu.c_cpseti

def c_cpsetr(arg1, arg2):
    return _hlu.c_cpsetr(arg1, arg2)
c_cpsetr = _hlu.c_cpsetr

def c_pcseti(arg1, arg2):
    return _hlu.c_pcseti(arg1, arg2)
c_pcseti = _hlu.c_pcseti

def c_pcsetr(arg1, arg2):
    return _hlu.c_pcsetr(arg1, arg2)
c_pcsetr = _hlu.c_pcsetr

def c_set(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _hlu.c_set(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
c_set = _hlu.c_set

def c_cprect(arg1, arg2, arg3, arg4, arg5, arg6, sequence_as_int, arg8):
    return _hlu.c_cprect(arg1, arg2, arg3, arg4, arg5, arg6, sequence_as_int, arg8)
c_cprect = _hlu.c_cprect

def c_cpcldr(arg1, arg2, sequence_as_int):
    return _hlu.c_cpcldr(arg1, arg2, sequence_as_int)
c_cpcldr = _hlu.c_cpcldr

def c_plchhq(arg1, arg2, arg3, arg4, arg5, arg6):
    return _hlu.c_plchhq(arg1, arg2, arg3, arg4, arg5, arg6)
c_plchhq = _hlu.c_plchhq

def open_wks_wrap(arg1, arg2, arg3, arg4, arg5):
    return _hlu.open_wks_wrap(arg1, arg2, arg3, arg4, arg5)
open_wks_wrap = _hlu.open_wks_wrap

def labelbar_ndc_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _hlu.labelbar_ndc_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
labelbar_ndc_wrap = _hlu.labelbar_ndc_wrap

def legend_ndc_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _hlu.legend_ndc_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
legend_ndc_wrap = _hlu.legend_ndc_wrap

def blank_plot_wrap(arg1, arg2, arg3):
    return _hlu.blank_plot_wrap(arg1, arg2, arg3)
blank_plot_wrap = _hlu.blank_plot_wrap

def contour_wrap(arg1, sequence_as_void, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _hlu.contour_wrap(arg1, sequence_as_void, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
contour_wrap = _hlu.contour_wrap

def map_wrap(arg1, arg2, arg3):
    return _hlu.map_wrap(arg1, arg2, arg3)
map_wrap = _hlu.map_wrap

def contour_map_wrap(arg1, sequence_as_void, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _hlu.contour_map_wrap(arg1, sequence_as_void, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
contour_map_wrap = _hlu.contour_map_wrap

def xy_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _hlu.xy_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
xy_wrap = _hlu.xy_wrap

def y_wrap(arg1, sequence_as_void, arg3, arg4, sequence_as_int, arg6, arg7, arg8, arg9, arg10, arg11):
    return _hlu.y_wrap(arg1, sequence_as_void, arg3, arg4, sequence_as_int, arg6, arg7, arg8, arg9, arg10, arg11)
y_wrap = _hlu.y_wrap

def vector_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21):
    return _hlu.vector_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21)
vector_wrap = _hlu.vector_wrap

def vector_map_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21):
    return _hlu.vector_map_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21)
vector_map_wrap = _hlu.vector_map_wrap

def vector_scalar_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26):
    return _hlu.vector_scalar_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26)
vector_scalar_wrap = _hlu.vector_scalar_wrap

def vector_scalar_map_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26):
    return _hlu.vector_scalar_map_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26)
vector_scalar_map_wrap = _hlu.vector_scalar_map_wrap

def streamline_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21):
    return _hlu.streamline_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21)
streamline_wrap = _hlu.streamline_wrap

def streamline_map_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21):
    return _hlu.streamline_map_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21)
streamline_map_wrap = _hlu.streamline_map_wrap

def streamline_scalar_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26):
    return _hlu.streamline_scalar_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26)
streamline_scalar_wrap = _hlu.streamline_scalar_wrap

def streamline_scalar_map_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26):
    return _hlu.streamline_scalar_map_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26)
streamline_scalar_map_wrap = _hlu.streamline_scalar_map_wrap

def text_ndc_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _hlu.text_ndc_wrap(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
text_ndc_wrap = _hlu.text_ndc_wrap

def text_wrap(arg1, plot, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _hlu.text_wrap(arg1, plot, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
text_wrap = _hlu.text_wrap

def add_text_wrap(arg1, plot, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _hlu.add_text_wrap(arg1, plot, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
add_text_wrap = _hlu.add_text_wrap

def maximize_plots(arg1, plot, arg3, arg4, rlist):
    return _hlu.maximize_plots(arg1, plot, arg3, arg4, rlist)
maximize_plots = _hlu.maximize_plots

def poly_wrap(arg1, plot, arg3, arg4, type_x, type_y, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    return _hlu.poly_wrap(arg1, plot, arg3, arg4, type_x, type_y, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
poly_wrap = _hlu.poly_wrap

def add_poly_wrap(arg1, plot, arg3, arg4, type_x, type_y, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _hlu.add_poly_wrap(arg1, plot, arg3, arg4, type_x, type_y, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
add_poly_wrap = _hlu.add_poly_wrap

def panel_wrap(arg1, plot_seq, arg3, sequence_as_int, arg5, arg6, arg7, arg8):
    return _hlu.panel_wrap(arg1, plot_seq, arg3, sequence_as_int, arg5, arg6, arg7, arg8)
panel_wrap = _hlu.panel_wrap

def mapgci(arg1, arg2, arg3, arg4, arg5):
    return _hlu.mapgci(arg1, arg2, arg3, arg4, arg5)
mapgci = _hlu.mapgci

def dcapethermo(arg1, arg2, arg3, arg4, arg5, arg6):
    return _hlu.dcapethermo(arg1, arg2, arg3, arg4, arg5, arg6)
dcapethermo = _hlu.dcapethermo

def draw_colormap_wrap(arg1):
    return _hlu.draw_colormap_wrap(arg1)
draw_colormap_wrap = _hlu.draw_colormap_wrap

def natgridc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, nxir, nyir):
    return _hlu.natgridc(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, nxir, nyir)
natgridc = _hlu.natgridc

def ftcurvc(arg1, arg2, arg3, m, arg5):
    return _hlu.ftcurvc(arg1, arg2, arg3, m, arg5)
ftcurvc = _hlu.ftcurvc

def ftcurvpc(arg1, arg2, arg3, arg4, m, arg6):
    return _hlu.ftcurvpc(arg1, arg2, arg3, arg4, m, arg6)
ftcurvpc = _hlu.ftcurvpc

def ftcurvpic(arg1, arg2, arg3, arg4, arg5, arg6):
    return _hlu.ftcurvpic(arg1, arg2, arg3, arg4, arg5, arg6)
ftcurvpic = _hlu.ftcurvpic

def c_rgbhls(arg1, arg2, arg3):
    return _hlu.c_rgbhls(arg1, arg2, arg3)
c_rgbhls = _hlu.c_rgbhls

def c_hlsrgb(arg1, arg2, arg3):
    return _hlu.c_hlsrgb(arg1, arg2, arg3)
c_hlsrgb = _hlu.c_hlsrgb

def c_rgbhsv(arg1, arg2, arg3):
    return _hlu.c_rgbhsv(arg1, arg2, arg3)
c_rgbhsv = _hlu.c_rgbhsv

def c_hsvrgb(arg1, arg2, arg3):
    return _hlu.c_hsvrgb(arg1, arg2, arg3)
c_hsvrgb = _hlu.c_hsvrgb

def c_rgbyiq(arg1, arg2, arg3):
    return _hlu.c_rgbyiq(arg1, arg2, arg3)
c_rgbyiq = _hlu.c_rgbyiq

def c_yiqrgb(arg1, arg2, arg3):
    return _hlu.c_yiqrgb(arg1, arg2, arg3)
c_yiqrgb = _hlu.c_yiqrgb

def getbb(arg1):
    return _hlu.getbb(arg1)
getbb = _hlu.getbb

def c_wmbarbp(arg1, arg2, arg3, arg4, arg5):
    return _hlu.c_wmbarbp(arg1, arg2, arg3, arg4, arg5)
c_wmbarbp = _hlu.c_wmbarbp

def c_wmsetip(arg1, arg2):
    return _hlu.c_wmsetip(arg1, arg2)
c_wmsetip = _hlu.c_wmsetip

def c_wmsetrp(arg1, arg2):
    return _hlu.c_wmsetrp(arg1, arg2)
c_wmsetrp = _hlu.c_wmsetrp

def c_wmsetcp(arg1, arg2):
    return _hlu.c_wmsetcp(arg1, arg2)
c_wmsetcp = _hlu.c_wmsetcp

def c_wmstnmp(arg1, arg2, arg3, arg4):
    return _hlu.c_wmstnmp(arg1, arg2, arg3, arg4)
c_wmstnmp = _hlu.c_wmstnmp

def c_wmgetip(arg1):
    return _hlu.c_wmgetip(arg1)
c_wmgetip = _hlu.c_wmgetip

def c_wmgetrp(arg1):
    return _hlu.c_wmgetrp(arg1)
c_wmgetrp = _hlu.c_wmgetrp

def c_wmgetcp(arg1):
    return _hlu.c_wmgetcp(arg1)
c_wmgetcp = _hlu.c_wmgetcp

def c_nnseti(arg1, arg2):
    return _hlu.c_nnseti(arg1, arg2)
c_nnseti = _hlu.c_nnseti

def c_nnsetrd(arg1, arg2):
    return _hlu.c_nnsetrd(arg1, arg2)
c_nnsetrd = _hlu.c_nnsetrd

def c_nnsetc(arg1, arg2):
    return _hlu.c_nnsetc(arg1, arg2)
c_nnsetc = _hlu.c_nnsetc

def c_nngeti(arg1):
    return _hlu.c_nngeti(arg1)
c_nngeti = _hlu.c_nngeti

def c_nngetrd(arg1):
    return _hlu.c_nngetrd(arg1)
c_nngetrd = _hlu.c_nngetrd

def c_nngetcp(arg1):
    return _hlu.c_nngetcp(arg1)
c_nngetcp = _hlu.c_nngetcp

def c_dgcdist(arg1, arg2, arg3, arg4, arg5):
    return _hlu.c_dgcdist(arg1, arg2, arg3, arg4, arg5)
c_dgcdist = _hlu.c_dgcdist

def c_dcapethermo(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _hlu.c_dcapethermo(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
c_dcapethermo = _hlu.c_dcapethermo

def c_dptlclskewt(arg1, arg2, arg3):
    return _hlu.c_dptlclskewt(arg1, arg2, arg3)
c_dptlclskewt = _hlu.c_dptlclskewt

def c_dtmrskewt(arg1, arg2):
    return _hlu.c_dtmrskewt(arg1, arg2)
c_dtmrskewt = _hlu.c_dtmrskewt

def c_dtdaskewt(arg1, arg2):
    return _hlu.c_dtdaskewt(arg1, arg2)
c_dtdaskewt = _hlu.c_dtdaskewt

def c_dsatlftskewt(arg1, arg2):
    return _hlu.c_dsatlftskewt(arg1, arg2)
c_dsatlftskewt = _hlu.c_dsatlftskewt

def c_dshowalskewt(arg1, arg2, arg3, arg4):
    return _hlu.c_dshowalskewt(arg1, arg2, arg3, arg4)
c_dshowalskewt = _hlu.c_dshowalskewt

def c_dpwskewt(arg1, arg2, arg3):
    return _hlu.c_dpwskewt(arg1, arg2, arg3)
c_dpwskewt = _hlu.c_dpwskewt

def pvoid():
    return _hlu.pvoid()
pvoid = _hlu.pvoid

def set_nglRes_i(arg1, arg2):
    return _hlu.set_nglRes_i(arg1, arg2)
set_nglRes_i = _hlu.set_nglRes_i

def get_nglRes_i(arg1):
    return _hlu.get_nglRes_i(arg1)
get_nglRes_i = _hlu.get_nglRes_i

def set_nglRes_f(arg1, arg2):
    return _hlu.set_nglRes_f(arg1, arg2)
set_nglRes_f = _hlu.set_nglRes_f

def get_nglRes_f(arg1):
    return _hlu.get_nglRes_f(arg1)
get_nglRes_f = _hlu.get_nglRes_f

def set_nglRes_c(arg1, arg2):
    return _hlu.set_nglRes_c(arg1, arg2)
set_nglRes_c = _hlu.set_nglRes_c

def get_nglRes_c(arg1):
    return _hlu.get_nglRes_c(arg1)
get_nglRes_c = _hlu.get_nglRes_c

def set_nglRes_s(arg1, arg2):
    return _hlu.set_nglRes_s(arg1, arg2)
set_nglRes_s = _hlu.set_nglRes_s

def get_nglRes_s(arg1):
    return _hlu.get_nglRes_s(arg1)
get_nglRes_s = _hlu.get_nglRes_s

def NglGaus_p(num, nxir, nyir):
    return _hlu.NglGaus_p(num, nxir, nyir)
NglGaus_p = _hlu.NglGaus_p
# This file is compatible with both classic and new-style classes.


